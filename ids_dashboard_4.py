# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VtBblDxy1xceoepXTUZVzZGNeSmpZLZS
"""

# app.py
import pandas as pd
import numpy as np
from sklearn.ensemble import IsolationForest, RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, roc_curve, auc, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st

# ================================
# 1. STREAMLIT SETTINGS
# ================================
st.set_page_config(page_title="IDS Dashboard", layout="wide")
st.title("IDS Dashboard ‚Äî CICIDS2017")

# ================================
# 2. FILE UPLOAD
# ================================
uploaded_file = st.file_uploader("üìÇ Upload CICIDS2017 CSV file", type=["csv"])

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)

    # Optionally sample large datasets for performance
    if len(df) > 100000:
        st.warning("Dataset too large, sampling 100,000 rows for performance.")
        df = df.sample(100000, random_state=42)

    # ================================
    # 3. FEATURES + LABEL
    # ================================
    if "Label" not in df.columns:
        st.error("‚ö†Ô∏è 'Label' column not found in dataset.")
        st.stop()

    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    if not numeric_cols:
        st.error("‚ö†Ô∏è No numeric feature columns found.")
        st.stop()

    X = df[numeric_cols]
    y = df['Label'].apply(lambda x: "BENIGN" if str(x).upper() == "BENIGN" else "ATTACK")

    # ================================
    # 4. TRAIN/TEST SPLIT
    # ================================
    X_train, X_test, y_train, y_test = train_test_split(
        X, y,
        test_size=0.3,
        random_state=42,
        stratify=y
    )

    # ================================
    # 5. ISOLATION FOREST
    # ================================
    iso = IsolationForest(
        contamination=0.1,
        random_state=42
    )
    iso.fit(X_train)
    y_pred_iso = iso.predict(X_test)
    y_pred_iso = np.where(y_pred_iso == -1, "ATTACK", "BENIGN")

    # ================================
    # 6. RANDOM FOREST
    # ================================
    rf = RandomForestClassifier(
        n_estimators=100,
        random_state=42,
        n_jobs=-1
    )
    rf.fit(X_train, y_train)
    y_pred_rf = rf.predict(X_test)

    # ================================
    # 7. METRICS
    # ================================
    report_iso = classification_report(y_test, y_pred_iso, output_dict=True)
    report_rf  = classification_report(y_test, y_pred_rf, output_dict=True)

    # --- Random Forest ROC ---
    if hasattr(rf, "predict_proba"):
       # Probabilities for the positive class (ATTACK)
       if hasattr(rf, "predict_proba"):
           y_prob_rf = rf.predict_proba(X_test)[:, list(rf.classes_).index("ATTACK")]
       else:
           # Fallback: use decision_function or predictions (not ideal)
           y_prob_rf = rf.predict(X_test)

       fpr_rf, tpr_rf, _ = roc_curve(y_test, y_prob_rf, pos_label="ATTACK")
       roc_auc_rf = auc(fpr_rf, tpr_rf)

       fig_rf, ax_rf = plt.subplots()
       ax_rf.plot(fpr_rf, tpr_rf, color="blue", lw=2,
               label=f"RF (AUC = {roc_auc_rf:.2f})")
       ax_rf.plot([0, 1], [0, 1], color="black", lw=2, linestyle="--")
       ax_rf.set_xlabel("False Positive Rate")
       ax_rf.set_ylabel("True Positive Rate")
       ax_rf.set_title("ROC Curve - Random Forest")
       ax_rf.legend(loc="lower right")
       st.pyplot(fig_rf)


    # --- Isolation Forest ROC ---
    # Convert y_test into binary {0,1}
    y_test_bin = (y_test == "ATTACK").astype(int)

    # Isolation Forest gives anomaly scores (lower = more normal, higher = anomaly)
    y_scores_iso = -iso.decision_function(X_test)

    fpr_iso, tpr_iso, _ = roc_curve(y_test_bin, y_scores_iso)
    roc_auc_iso = auc(fpr_iso, tpr_iso)

    fig_iso, ax_iso = plt.subplots()
    ax_iso.plot(fpr_iso, tpr_iso, color="red", lw=2,
            label=f"ISO (AUC = {roc_auc_iso:.2f})")
    ax_iso.plot([0, 1], [0, 1], color="black", lw=2, linestyle="--")
    ax_iso.set_xlabel("False Positive Rate")
    ax_iso.set_ylabel("True Positive Rate")
    ax_iso.set_title("ROC Curve - Isolation Forest")
    ax_iso.legend(loc="lower right")
    st.pyplot(fig_iso)

    # Confusion matrices
    cm_rf  = confusion_matrix(y_test, y_pred_rf,  labels=['BENIGN','ATTACK'])
    cm_iso = confusion_matrix(y_test, y_pred_iso, labels=['BENIGN','ATTACK'])

    # ================================
    # 8. STREAMLIT DASHBOARD
    # ================================
    model_choice = st.sidebar.radio(
        "Select Model to View",
        ["IsolationForest", "RandomForest", "Comparison"]
    )

    if model_choice == "IsolationForest":
        st.subheader("Isolation Forest (Unsupervised)")
        st.metric("ROC-AUC", f"{roc_auc_iso:.3f}")
        st.write("Classification Report:", pd.DataFrame(report_iso).transpose())

        fig_cm, ax = plt.subplots()
        sns.heatmap(cm_iso, annot=True, fmt="d", cmap="Blues", ax=ax)
        st.pyplot(fig_cm)

        fig_roc, ax = plt.subplots()
        ax.plot(fpr_iso, tpr_iso, label=f"AUC = {roc_auc_iso:.3f}")
        ax.plot([0, 1], [0, 1], 'k--')
        ax.set_xlabel("False Positive Rate")
        ax.set_ylabel("True Positive Rate")
        ax.set_title("ROC Curve")
        ax.legend()
        st.pyplot(fig_roc)

    elif model_choice == "RandomForest":
        st.subheader("Random Forest (Supervised)")
        st.metric("ROC-AUC", f"{roc_auc_rf:.3f}")
        st.write("Classification Report:", pd.DataFrame(report_rf).transpose())

        fig_cm, ax = plt.subplots()
        sns.heatmap(cm_rf, annot=True, fmt="d", cmap="Greens", ax=ax)
        st.pyplot(fig_cm)

        fig_roc, ax = plt.subplots()
        ax.plot(fpr_rf, tpr_rf, label=f"AUC = {roc_auc_rf:.3f}")
        ax.plot([0, 1], [0, 1], 'k--')
        ax.set_xlabel("False Positive Rate")
        ax.set_ylabel("True Positive Rate")
        ax.set_title("ROC Curve")
        ax.legend()
        st.pyplot(fig_roc)

    else:
        st.subheader("Model Comparison")

        col1, col2 = st.columns(2)
        with col1:
            st.write("**Isolation Forest Confusion Matrix**")
            fig_cm, ax = plt.subplots()
            sns.heatmap(cm_iso, annot=True, fmt="d", cmap="Blues", ax=ax)
            st.pyplot(fig_cm)
        with col2:
            st.write("**Random Forest Confusion Matrix**")
            fig_cm, ax = plt.subplots()
            sns.heatmap(cm_rf, annot=True, fmt="d", cmap="Greens", ax=ax)
            st.pyplot(fig_cm)

        col1, col2 = st.columns(2)
        with col1:
            st.write("**Isolation Forest ROC Curve**")
            fig_roc, ax = plt.subplots()
            ax.plot(fpr_iso, tpr_iso, label=f"AUC = {roc_auc_iso:.3f}")
            ax.plot([0, 1], [0, 1], 'k--')
            ax.legend()
            st.pyplot(fig_roc)
        with col2:
            st.write("**Random Forest ROC Curve**")
            fig_roc, ax = plt.subplots()
            ax.plot(fpr_rf, tpr_rf, label=f"AUC = {roc_auc_rf:.3f}")
            ax.plot([0, 1], [0, 1], 'k--')
            ax.legend()
            st.pyplot(fig_roc)

    # ================================
    # 9. SAMPLE PREDICTIONS
    # ================================
    pred_df = pd.DataFrame({
        "True Label": y_test,
        "Predicted (RF)": y_pred_rf,
        "Predicted (ISO)": y_pred_iso
    })
    st.subheader("Sample Predictions")
    st.dataframe(pred_df.head(20))

    csv = pred_df.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="üì• Download Predictions as CSV",
        data=csv,
        file_name="predictions.csv",
        mime="text/csv"
    )

else:
    st.info("üëÜ Please upload a CICIDS2017 CSV file to begin.")

