# -*- coding: utf-8 -*-
"""IDS Dashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gf5MqIDns1XpTcXA_e7a7vogoqN7MTef
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.ensemble import RandomForestClassifier, IsolationForest
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report
from google.colab import files
import io

@st.cache_data
def load_data(file_path):
    url="https://drive.google.com/file/d/1VuDaADaAHFI2BNHcapXt4iA3qTXyIckB/view?usp=drive_link"
    df = pd.read_csv(url)
    return df

st.sidebar.title("Upload Dataset")
uploaded_file = st.sidebar.file_uploader("Upload CICIDS2017 CSV file", type="csv")

if uploaded_file is not None:
    df = load_data(uploaded_file)

    # -----------------------
    # Prepare data
    # -----------------------
    X = df.drop(columns=['Label'])
    Y = df['Label']

    ATTACK_KEYWORDS = ["ddos", "brute force", "hweb attacks", "port scanning"]

    def infer_binary_label(label: str) -> int:
        s = str(label).lower()
        if s == "normal traffic":
            return 0
        return int(any(k in s for k in ATTACK_KEYWORDS))

    # Split data
    X_train, X_test, Y_train, Y_test = train_test_split(
        X, Y, test_size=0.3, random_state=42, stratify=Y
    )

    # -----------------------
    # Train models
    # -----------------------
    iso = IsolationForest(contamination=0.1, random_state=42)
    iso.fit(X_train)
    y_pred_iso = iso.predict(X_test)
    y_pred_iso = np.where(y_pred_iso == -1, "ATTACK", "BENIGN")

    rf = RandomForestClassifier(n_estimators=100, random_state=42)
    rf.fit(X_train, Y_train)
    y_pred_rf = rf.predict(X_test)

    # Binary labels for comparison
    Y_test_binary = Y_test.apply(infer_binary_label).astype(int)
    y_pred_iso_binary = (y_pred_iso == "ATTACK").astype(int)
    y_pred_rf_binary = np.array([infer_binary_label(label) for label in y_pred_rf]).astype(int)

    # -----------------------
    # Streamlit Dashboard
    # -----------------------
    st.set_page_config(page_title="IDS Dashboard üåå", layout="wide", page_icon="üõ°Ô∏è")
    st.markdown("<h1 style='text-align: center; color: #FAFAFA;'>üåå Intrusion Detection System (IDS) Dashboard</h1>", unsafe_allow_html=True)
    st.markdown("<div style='background-color:#0E1117; padding: 20px;'>", unsafe_allow_html=True)

    # Sidebar controls
    model_choice = st.sidebar.selectbox("Choose Model", ["Isolation Forest", "Random Forest"])
    comparison_mode = st.sidebar.checkbox("Enable Comparison Mode")

    if not comparison_mode:
        # Metrics
        col1, col2, col3 = st.columns(3)
        if model_choice == "Random Forest":
            accuracy = round(np.mean(y_pred_rf_binary == Y_test_binary) * 100, 2)
            detected_attacks = int(sum(y_pred_rf_binary))
        else:
            accuracy = round(np.mean(y_pred_iso_binary == Y_test_binary) * 100, 2)
            detected_attacks = int(sum(y_pred_iso_binary))
        normal_traffic = len(Y_test_binary) - detected_attacks

        col1.metric(label="Accuracy", value=f"{accuracy}%")
        col2.metric(label="Detected Attacks", value=detected_attacks)
        col3.metric(label="Normal Traffic", value=normal_traffic)

        # Network traffic line chart
        st.markdown("### üìà Network Traffic Over Time")
        df_plot = pd.DataFrame({
            "Timestamp": pd.date_range("2023-01-01", periods=len(Y_test_binary), freq="min"),
            "Packets": np.random.randint(0, 500, size=len(Y_test_binary)),
            "Attack": np.where(Y_test_binary==1, "ATTACK", "NORMAL")
        })
        fig_line = px.line(
            df_plot, x="Timestamp", y="Packets", color="Attack",
            template="plotly_dark",
            color_discrete_sequence=["#00ffcc", "#ff0080"]
        )
        st.plotly_chart(fig_line, use_container_width=True)

    else:
        # Model comparison
        st.markdown("### üîÑ Model Comparison: Random Forest vs Isolation Forest")

        labels = sorted(Y_test.unique())
        cm_rf = confusion_matrix(Y_test, y_pred_rf, labels=labels)
        cm_iso = confusion_matrix(Y_test, y_pred_iso, labels=labels)

        rf_counts = pd.DataFrame({"Label": labels, "Count": cm_rf.diagonal()})
        iso_counts = pd.DataFrame({"Label": labels, "Count": cm_iso.diagonal()})

        col1, col2 = st.columns(2)
        fig_rf = px.bar(rf_counts, x="Label", y="Count", template="plotly_dark", color="Label")
        fig_iso = px.bar(iso_counts, x="Label", y="Count", template="plotly_dark", color="Label")

        col1.plotly_chart(fig_rf, use_container_width=True)
        col2.plotly_chart(fig_iso, use_container_width=True)

    st.markdown("</div>", unsafe_allow_html=True)

else:
    st.warning("Please upload the cleaned CICIDS2017 CSV file to start the dashboard.")